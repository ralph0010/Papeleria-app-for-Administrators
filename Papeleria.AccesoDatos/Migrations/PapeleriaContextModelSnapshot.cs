// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Papeleria.AccesoDatos.PapeleriaCT;

#nullable disable

namespace Papeleria.AccesoDatos.Migrations
{
    [DbContext(typeof(PapeleriaContext))]
    partial class PapeleriaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.DefinirTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DefinirTipos");

                    b.HasDiscriminator<int>("Id");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.TipoMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TipoElegidoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("TipoElegidoId");

                    b.ToTable("TipoMovimientos");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.MovimientosStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoMovimientoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoMovimientoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("MovimientosStocks");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.ItemArticulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoId")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("PedidoId");

                    b.ToTable("ItemArticulo");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<bool>("EstaAnulado")
                        .HasColumnType("bit");

                    b.Property<double>("IVA")
                        .HasColumnType("float");

                    b.Property<double>("PrecioTotalConIva")
                        .HasColumnType("float");

                    b.Property<double>("PrecioTotalSinIva")
                        .HasColumnType("float");

                    b.Property<double>("Recargo")
                        .HasColumnType("float");

                    b.Property<int>("TipoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.TipoPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoPedidos");

                    b.HasDiscriminator<int>("Id");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Usuarios.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TipoRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("rols");

                    b.HasDiscriminator<int>("Id");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.ValueObjects.VO.ValuePedido.ClaseIVA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("iva");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Valor = 0.22
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.AumentoStock", b =>
                {
                    b.HasBaseType("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.DefinirTipo");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TipoMovimiento = "AumentoStock"
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.ReduccionStock", b =>
                {
                    b.HasBaseType("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.DefinirTipo");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            TipoMovimiento = "ReduccionStock"
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.Traslado", b =>
                {
                    b.HasBaseType("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.DefinirTipo");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            TipoMovimiento = "Traslado"
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.PedidoComun", b =>
                {
                    b.HasBaseType("Papeleria.LogicaNegocio.Entidades.Pedidos.TipoPedido");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tipo = "PedidoComun"
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.PedidoExpress", b =>
                {
                    b.HasBaseType("Papeleria.LogicaNegocio.Entidades.Pedidos.TipoPedido");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Tipo = "PedidoExpres"
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("Papeleria.LogicaNegocio.Entidades.Usuarios.Rol");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TipoRol = "Administrador"
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Usuarios.EncargadoDeposito", b =>
                {
                    b.HasBaseType("Papeleria.LogicaNegocio.Entidades.Usuarios.Rol");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            TipoRol = "EncargadoDeposito"
                        });
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.ValueArticulo.CodigoBarras", "Codigo", b1 =>
                        {
                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<string>("Codigo")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ArticuloId");

                            b1.HasIndex("Codigo")
                                .IsUnique();

                            b1.ToTable("Articulos");

                            b1.WithOwner()
                                .HasForeignKey("ArticuloId");
                        });

                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.ValueArticulo.NombreArticulo", "nombreArticulo", b1 =>
                        {
                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ArticuloId");

                            b1.HasIndex("Nombre")
                                .IsUnique();

                            b1.ToTable("Articulos");

                            b1.WithOwner()
                                .HasForeignKey("ArticuloId");
                        });

                    b.Navigation("Codigo")
                        .IsRequired();

                    b.Navigation("nombreArticulo")
                        .IsRequired();
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.VOCliente.DireccionRecordVO", "Direccion", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("DistanciaPapeleria")
                                .HasColumnType("float");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ClienteId");

                            b1.HasIndex("Calle", "Numero", "Ciudad", "DistanciaPapeleria");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.VOCliente.Rut", "Rut", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Digitos")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ClienteId");

                            b1.HasIndex("Digitos")
                                .IsUnique();

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();

                    b.Navigation("Rut")
                        .IsRequired();
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.TipoMovimiento", b =>
                {
                    b.HasOne("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.DefinirTipo", "TipoElegido")
                        .WithMany()
                        .HasForeignKey("TipoElegidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoElegido");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.MovimientoStock.MovimientosStock", b =>
                {
                    b.HasOne("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ClasesPorTipoMovimiento.TipoMovimiento", "TipoMovimiento")
                        .WithMany()
                        .HasForeignKey("TipoMovimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papeleria.LogicaNegocio.Entidades.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Papeleria.LogicaNegocio.Entidades.MovimientoStock.ItemArticuloMovimiento", "ArticuloSeleccionado", b1 =>
                        {
                            b1.Property<int>("MovimientosStockId")
                                .HasColumnType("int");

                            b1.HasKey("MovimientosStockId");

                            b1.ToTable("MovimientosStocks");

                            b1.WithOwner()
                                .HasForeignKey("MovimientosStockId");
                        });

                    b.Navigation("ArticuloSeleccionado")
                        .IsRequired();

                    b.Navigation("TipoMovimiento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.ItemArticulo", b =>
                {
                    b.HasOne("Papeleria.LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papeleria.LogicaNegocio.Entidades.Pedidos.Pedido", null)
                        .WithMany("Articulos")
                        .HasForeignKey("PedidoId");

                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.Pedido", b =>
                {
                    b.HasOne("Papeleria.LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papeleria.LogicaNegocio.Entidades.Pedidos.TipoPedido", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.ValuePedido.FechaPedido", "Fecha", b1 =>
                        {
                            b1.Property<int>("PedidoId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("FechaEmision")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("FechaEntrega")
                                .HasColumnType("datetime2");

                            b1.HasKey("PedidoId");

                            b1.HasIndex("FechaEmision", "FechaEntrega");

                            b1.ToTable("Pedidos");

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");
                        });

                    b.Navigation("Cliente");

                    b.Navigation("Fecha")
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Usuarios.Usuario", b =>
                {
                    b.HasOne("Papeleria.LogicaNegocio.Entidades.Usuarios.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.VOUsuario.Correo", "Emaill", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("UsuarioId");

                            b1.HasIndex("Email")
                                .IsUnique();

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.VOUsuario.NombreApellidoVO", "NombreApellido", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("ApellidoUsuario");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("NombreUsuario");

                            b1.HasKey("UsuarioId");

                            b1.HasIndex("Nombre", "Apellido");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("Papeleria.LogicaNegocio.ValueObjects.VO.VOUsuario.PasswordUsuarioVO", "Passwordd", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("PasswordEncriptada")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("UsuarioId");

                            b1.HasIndex("Password", "PasswordEncriptada");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Emaill")
                        .IsRequired();

                    b.Navigation("NombreApellido")
                        .IsRequired();

                    b.Navigation("Passwordd")
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Papeleria.LogicaNegocio.Entidades.Pedidos.Pedido", b =>
                {
                    b.Navigation("Articulos");
                });
#pragma warning restore 612, 618
        }
    }
}
